

# Gmail SMTP
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


security.basic.enabled=false # TODO: configure security to meet your needs


# path to attachment file
attachment.invoice=path_to_file
## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
# Launch DB via Docker:
# docker run   --name myPostgresDb  -p 5455:5432  -e POSTGRES_USER=postgresUser   -e POSTGRES_PASSWORD=postgresPW   -e POSTGRES_DB=postgresDB  -d  postgres
spring.datasource.url=jdbc:postgresql://localhost:5455/postgresDB
server.port=4096
spring.datasource.username=postgresUser
spring.datasource.password=postgresPW
server.error.whitelabel.enabled=false
server.error.path=/error
#spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.session.jdbc.initialize-schema=always
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
spring.jpa.properties.hibernate.globally_quoted_identifiers_skip_column_definitions = true
spring.graphql.cors.allowed-origins=*

#server.ssl.key-store=/etc/letsencrypt/live/www.hs.api.helpsched.com/keystore.p12
#server.ssl.certificate=/etc/letsencrypt/live/hs.api.onfactorial.com/fullchain.pem
#server.ssl.certificate-private-key=/etc/letsencrypt/live/hs.api.onfactorial.com/privkey.pem
#server.ssl.key-store-password=www.hs.api.helpsched.com
#server.ssl.keyStoreType=PKCS12
#server.ssl.keyAlias=www.hs.api.helpsched.com
#server.ssl.enabled=true


spring.graphql.graphiql.enabled=true
spring.thymeleaf.enabled=false
spring.graphql.schema.printer.enabled=true

#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=create-drop

# Google Oauth2
#spring.security.oauth2.client.registration.google.client-id=
#spring.security.oauth2.client.registration.google.client-secret=
#spring.security.oauth2.client.registration.google.scope=
#spring.security.oauth2.resourceserver.jwt.issuer-uri=
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=
#spring.security.oauth2.resourceserver.jwt.audiences=

# Microsoft Oauth2
#spring.cloud.azure.active-directory.app-id-uri=
#spring.cloud.azure.active-directory.client-id=
#spring.cloud.azure.active-directory.enabled=true
# https://learn.microsoft.com/en-us/azure/developer/java/spring-framework/spring-boot-starter-for-azure-active-directory-developer-guide#protect-a-resource-serverapi
# https://github.com/Azure-Samples/azure-spring-boot-samples/tree/spring-cloud-azure_4.4.0/aad/spring-cloud-azure-starter-active-directory/web-client-access-resource-server/aad-resource-server

